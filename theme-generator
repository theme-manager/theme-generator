#!/usr/bin/env sh

printUsage() {
    echo "Usage:
    theme-generator [OPTIONS]* ...
    
Options:
    -h  --help              Show this help message
    -i          <image>     Path to the Image which will be used to generate the theme
    -n          <number>    Number of colors to extract from the image.
                            The default value is 5.
    -o          <output>    Output directory. Default directory is $HOME/.config/theme-manager/output
    -s          <size>      Size to which the image gets compromized before extracting colors.
                            The default value is 256. Values should be a power of 2 and ge 64 for best results.
    -f          [formats]   Output format Option. Default value is g. Can be multiple values
                                g for gtk-css
                                h for html-css
                                p for png
                                r for rgb-text-file
                                t for hex-text-file"
}

# error codes
# 0 - success
# 1 - missing argument(s)
# 2 - wrong argument(s)
# 3 - missing dependecy
# 4 - wrong configuration file
# 5 - internal error

# Prints an given error message and returns with the given error code
# $1 - exit code
# $2 - error message
printErr() {
    echo "Error: $2" >&2
    echo "Use -h or --help to display help" >&2
    exit "$1"
}

# Prints a given warning message and optionally returns with the given exit code
# $1 - warning message
# [$2 - exit code]
printWarning() {
    echo "$1" >&3
    [ -n "$2" ] && exit "$2"
}

checkOutputDir() {
    if [ -d "$1" ]; then 
        output="$1"
    else
        echo "Output directory '$1' does not exist. Do you want to create it? (y/N)"
        read -r answer
        [ "$answer" != "y" ] && [ "$answer" != "Y" ] && printWarning "Aborting..." 3

        echo "$1"
        mkdir -p "$1" || printErr 3 "Failed to create directory '$2'"
        output="$1"
        echo "Directory created"
    fi
}

createColorFilesInTmp() {
    convert "$srcImage" -geometry "${res}x${res}" -colors "$num" -unique-colors -scale 4000% "/tmp/colors.txt"
    tail -n +2 "/tmp/colors.txt" > "/tmp/colors_trim.txt"
    cut -d ' ' -f 4 "/tmp/colors_trim.txt" > "/tmp/colors_cut.txt" 
    uniq "/tmp/colors_cut.txt" | head -n "$num" > "/tmp/colors_hex.txt"
}

copyAndRemoveFilesFromTmp() {
    if "$saveHexFile"; then
        cp "/tmp/colors_hex.txt" "${output}colors/colors-hex.txt"
    fi
    if "$saveRgbFile"; then
        cut -d ' ' -f 2 "/tmp/colors_trim.txt" > "/tmp/colors_rgb.txt"
        uniq "/tmp/colors_rgb.txt" | head -n "$num" | sed "s/(//g" | sed "s/)//g" | sed "s/,/ /g" > "/tmp/colors_rgb_uniq.txt"
        cp "/tmp/colors_rgb_uniq.txt" "${output}colors/"colors-rgb.txt
    fi
    rm "/tmp/colors.txt" "/tmp/colors_trim.txt" "/tmp/colors_cut.txt" "/tmp/colors_rgb.txt" "/tmp/colors_hex.txt" "/tmp/colors_rgb_uniq.txt"
}

convertAndSaveAsCssForGtk() {
    echo " - Converting image to .css file for gtk..."
    createColorFilesInTmp

    index=0
    echo "" > "${output}colors/colors-gtk.css"
    while IFS= read -r hexCode; do
        echo "@define-color color${index} ${hexCode};" >> "${output}colors/colors-gtk.css"
        index=$((index+=1))
    done < "/tmp/colors_hex.txt"

    copyAndRemoveFilesFromTmp
}

convertAndSaveAsCssForHtml() {
    echo " - Converting image to .css file for html..."
    createColorFilesInTmp

    index=0
    echo ":root {" > "${output}colors/colors-html.css"
    while IFS= read -r hexCode; do
        printf "\t--color%s: %s;\n" $index "$hexCode" >> "${output}colors/colors-html.css"
        index=$((index+=1))
    done < "/tmp/colors_hex.txt"
    echo "}" >> "${output}colors/colors-html.css"

    copyAndRemoveFilesFromTmp
}

convertAndSaveAsPNG() {
    echo " - Converting image to theme color stripe..."
    convert "$srcImage" -geometry "${res}x${res}" -colors "$num" -unique-colors -scale 4000% "${output}colors/colors.png"
}

# Set the default values
res=256
num=5
saveHexFile=false
saveRgbFile=false
output="$HOME/.config/theme-manager/output/"

# Check if imagemagick is installed
which convert >/dev/null 2>&1 || printErr 2 "ImageMagick CLI tools not found"

# check if usage has to be printed
if [ "$1" = "" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    printUsage
    exit 0
fi

while [ "$#" -gt 0 ]; do
    case "$1" in
        -i)
            [ "$2" != "" ] || printErr 2 "Option '$1' requires an argument"
            [ -r "$2" ] || printErr 1 "Specified image file does not exist or is not readable"
            srcImage="$2"
            shift 2 ;;
        -s)
            [ "$2" != "" ] || printErr 2 "Option '$1' requires an argument"
            res="$2"
            shift 2 ;;
        -n)
            [ "$2" != "" ] || printErr 2 "Option '$1' requires an argument"
            num="$2"
            shift 2 ;;
        -f)
            [ "$2" != "" ] || printErr 2 "Option '$1' requires at least one argument"
            echo "$2" | grep -q "h" && saveHexFile=true
            echo "$2" | grep -q "r" && saveRgbFile=true
            echo "$2" | grep -q "g" && convertAndSaveAsCssForGtk "$res" "$num"
            echo "$2" | grep -q "h" && convertAndSaveAsCssForHtml "$res" "$num"
            echo "$2" | grep -q "p" && convertAndSaveAsPNG "$res" "$num"
            shift 2 ;;
        -o)
            checkOutputDir "$2"
            shift 2 ;;
        *) printErr 2 "Invalid option: '$1'" ;;
    esac
done

[ $saveHexFile ] && echo " - Saving colors as hex in text file..."
[ $saveRgbFile ] && echo " - Saving colors as rgb in text file..." 

fileFormat=$(echo "$srcImage" | rev | cut -d '/' -f1 | cut -d '.' -f1 | rev)
if [ -d "${output}Wallpaper/" ]; then
    rm -r "${output:?}Wallpaper/"
fi
mkdir -p "${output}Wallpaper"
cp "$srcImage" "${output}Wallpaper/wallpaper.$fileFormat"

# Create the blurred version of the wallpaper
magick "$srcImage" -blur 20x20 "${output}Wallpaper/wallpaper_blurred.$fileFormat"

# Create the square cutout of the image
imageWidth="$(magick identify -format '%width' ${srcImage})"
imageHeight="$(magick identify -format '%width' ${srcImage})"
width="$(( imageWidth * 60 / 100 ))"
height="$(( imageHeight * 60 / 100 ))"
# Make the image dimensions squared
if [ "$width" -le "$height" ]; then
    height="$width"
else
    width="$height"
fi
xOffset="$(( $(( imageWidth - width )) / 2 ))"
yOffset="$(( $(( imageHeight - height )) / 2 ))"
magick "$srcImage" -crop "${width}x${height}+{xOffset}+{yOffset}" "${output}Wallpaper/wallpaper_cutout.$fileFormat"
